Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across 
API boundaries and between processes.

# Incoming requests to a server should create a Context, 
# outgoing calls to servers should accept a Context. 
# The chain of function calls between them must propagate the Context, 
  optionally replacing it with a derived Context created using WithCancel, WithDeadline, WithTimeout, or WithValue. 
  When a Context is canceled, all Contexts derived from it are also canceled.

# The WithCancelCause function returns a CancelCauseFunc, which takes an error and records it as the cancellation cause. 
  Calling Cause on the canceled context or any of its children retrieves the cause. If no cause is specified, Cause(ctx) returns the same value as        
  ctx.Err().
  
# Do not pass a nil Context, even if a function permits it. Pass context.TODO if you are unsure about which Context to use.

# Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions.

# The same Context may be passed to functions running in different goroutines; Contexts are safe for simultaneous use by multiple goroutines.
